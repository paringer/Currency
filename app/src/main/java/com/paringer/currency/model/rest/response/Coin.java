package com.paringer.currency.model.rest.response;

import android.os.Parcel;
import android.os.Parcelable;

/**
 * Created by Zhenya on 13.04.2018.
 */

public class Coin implements Parcelable{
    public Integer Id;
    public String Url;
    public String ImageUrl;
    public String Name;
    public String Symbol;
    public String CoinName;
    public String FullName;
    public String Algorithm;
    public String ProofType;
    public String FullyPremined;
    public String TotalCoinSupply;
    public String PreMinedValue;
    public String TotalCoinsFreeFloat;
    public Integer SortOrder;
    public String Sponsored;
    public Boolean IsTrading;

    public Coin() {}

    /**
     * autogenerated parcellable implementation
     * */
    protected Coin(Parcel in) {
        if (in.readByte() == 0) {
            Id = null;
        } else {
            Id = in.readInt();
        }
        Url = in.readString();
        ImageUrl = in.readString();
        Name = in.readString();
        Symbol = in.readString();
        CoinName = in.readString();
        FullName = in.readString();
        Algorithm = in.readString();
        ProofType = in.readString();
        FullyPremined = in.readString();
        TotalCoinSupply = in.readString();
        PreMinedValue = in.readString();
        TotalCoinsFreeFloat = in.readString();
        if (in.readByte() == 0) {
            SortOrder = null;
        } else {
            SortOrder = in.readInt();
        }
        Sponsored = in.readString();
        byte tmpIsTrading = in.readByte();
        IsTrading = tmpIsTrading == 0 ? null : tmpIsTrading == 1;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        if (Id == null) {
            dest.writeByte((byte) 0);
        } else {
            dest.writeByte((byte) 1);
            dest.writeInt(Id);
        }
        dest.writeString(Url);
        dest.writeString(ImageUrl);
        dest.writeString(Name);
        dest.writeString(Symbol);
        dest.writeString(CoinName);
        dest.writeString(FullName);
        dest.writeString(Algorithm);
        dest.writeString(ProofType);
        dest.writeString(FullyPremined);
        dest.writeString(TotalCoinSupply);
        dest.writeString(PreMinedValue);
        dest.writeString(TotalCoinsFreeFloat);
        if (SortOrder == null) {
            dest.writeByte((byte) 0);
        } else {
            dest.writeByte((byte) 1);
            dest.writeInt(SortOrder);
        }
        dest.writeString(Sponsored);
        dest.writeByte((byte) (IsTrading == null ? 0 : IsTrading ? 1 : 2));
    }

    @Override
    public int describeContents() {
        return 0;
    }

    public static final Creator<Coin> CREATOR = new Creator<Coin>() {
        @Override
        public Coin createFromParcel(Parcel in) {
            return new Coin(in);
        }

        @Override
        public Coin[] newArray(int size) {
            return new Coin[size];
        }
    };
}

